INSERT INTO PUBLIC.BLOG_POST(ID, AGGREGATE_VERSION, AUTHOR_ID, BROADCAST, CATEGORY, DRAFT, PUBLIC_SLUG, PUBLISH_AT, RAW_CONTENT, RENDER_CONTENT, TITLE, VERSION) VALUES
('1ef169df-040e-4b45-abfe-2be146e2e75f', 0, 'admin.admin', TRUE, 'ENGINEERING', TRUE, 'Accelerating-the-digitization', TIMESTAMP '2017-10-25 00:00:00.0', STRINGDECODE('For some executives, it\u2019s about technology. For others, digital is a new way of engaging with customers.\n\nIt\u2019s tempting to look for simple definitions, but to be meaningful and sustainable, I believe that digital should be seen less as a thing and more a way of doing things. To help make this definition more concrete, I have broken it down into three attributes: \n- creating value at the new frontiers of the business world, \n- creating value in the processes that execute a vision of customer experiences, \n- and building foundational capabilities that support the entire structure.\n\n\n## The trio - architecture, culture & process\n\nThe main focus of this blog post is the third part of the definition - \"building foundational capabilities that support the entire structure\". This foundation is made up of three elements:\n\n- [Microservices](http://microservices.io/patterns/microservices.html) is the architecture,\n- [DevOps](http://martinfowler.com/bliki/DevOpsCulture.html)\u2014specifically CALMS (collaboration, automation, learning, measuring, and sharing)\u2014is the culture,\n- and [continuous delivery](http://martinfowler.com/bliki/ContinuousDelivery.html) is the process.\n\n### Architecture - Microservices\n\nThe microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API (RESTful). These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n\nWhen organizations make the choice to put a digital platform in place, a discussion on Microservices is never far behind. By putting a Microservices layer in place, an organization creates the springboard to launch into the digital future, whether that involves apps, rich Web clients, or IoT devices such as in-store beacons. Individual Microservices, or orchestrated groups of Microservices, serve as the foundation for this innovation. The data being passed to and from Microservices also serves as the basis for behavioral analytics and Big Data, allowing organizations to tailor their digital services based on their users.\n\nA Microservices architecture style brings a lot of operations overhead. Where a monolithic application might have been deployed to a small application server cluster, you now have tens of separate services to build, test, deploy and run, potentially in polyglot languages and environments.\n\n#### Cloud \n\nIf you look at the concerns typically expressed about microservices, you will find that they are exactly the challenges that a PaaS (Platform As A Service) is intended to address.\n\nPaaS offerings like [Cloud Foundry](https://www.cloudfoundry.org/) have raised the level of abstraction to a focus on an ecosystem of applications and services. Cloud Foundry is open source and it can be deployed on private or public (IaaS) infrastructure.\n\nLinux container technology, such as [Docker](https://www.docker.com/), can be used to streamline the development, testing and deployment experience. The Docker platform empowers you to build a [CaaS](https://blog.docker.com/2016/02/containers-as-a-service-caas/) (Containers as a service) that fits your business requirements.\n\n#### Cloud native\n\nA cloud-native application is an application that has been designed and implemented to run on a PaaS or CaaS installation, and to embrace horizontal elastic scaling.\n\n### Culture - collaboration, automation, learning, measuring, and sharing\n\nWestrum\u2019s research emphasizes the importance of creating a culture where new ideas are welcomed, people from across the organization collaborate in the pursuit of common goals, where we train people to bring bad news so we can act on it, and where failures and accidents are treated as opportunities to learn how to improve rather than witch-hunts.\n\nThe DevOps movement has always emphasized the primary importance of culture, with a particular focus on effective collaboration between development teams and IT operations teams.\n\nWith the uptake of microservices and containers new challenges are rising: \u201cHow can we manage aspects such as API contracts?\u201d and \u201cHow can we apply changes across several repositories at once?\u201d. Those challenges highlight the need for greater collaboration between, and within, teams and this is a challenge that [Atomist](https://www.atomist.com) is addressing. Atomist is setting out to tackle with a set of tools that integrate seamlessly with the teams\u2019 practices.\nWith the rise of microservices, project creation is more and more important to individuals and organizations, as is maintaining consistency between a potentially large number of services.\n\nIndeed the highest-performing companies don\u2019t wait for bad things to happen in order to learn how to improve, they create (controlled) accidents on a regular basis so as to learn more quickly than the competition.\n\n\n### Process - Continuous Delivery\n\nThe idea of automated deployment is important. Indeed, if you take automating the deployment process to its logical conclusion, you could push every build that passes the necessary automated tests into production. The practice of automatically deploying every successful build directly into production is generally known as Continuous Deployment.\n\nHowever, a pure Continuous Deployment approach is not always appropriate for everyone. For example, many users would not appreciate new versions falling into their laps several times a week, and prefer a more predictable (and transparent) release cycle. Commercial and marketing considerations might also play a role in when a new release should actually be deployed. The notion of Continuous Delivery is a slight variation on the idea of Continuous Deployment that takes into account these considerations.\n\n[Spinnaker](http://www.spinnaker.io/) is an open source, multi-cloud continuous delivery platform for releasing software changes with high velocity and confidence.\n\n[Jenkins 2](https://jenkins.io/2.0/) pipelines are pretty neat to. I don''t think Spinnaker will every fully replace Jenkins and the million things it does. Spinnaker goal is to just make the ''deploy to cloud'' step simpler and more extensible.\n\n[CircleCI''s](https://circleci.com) continuous integration and delivery platform helps software teams rapidly release code with confidence by automating the build, test, and deploy process. CircleCI offers a modern software development platform that lets teams ramp quickly, scale easily, and build confidently every day. CircleCI offers a total of four free linux containers ($2400 annual value) for open-source projects.\n\n[Travis CI](https://travis-ci.org/) - Test and Deploy with Confidence. Testing your open source project is 10000% free with Travis CI.\n\n### The lab\n\nI have constucted a [lab](http://ivans-innovation-lab.github.io/). It is hosted on [Github](https://github.com/ivans-innovation-lab).\n\nThe intention of this lab is to build information system of fictitious company.\n\nYou will learn how we:\n\n- made decisions to use one pattern against the other,\n- changed architecture, organization (culture) and process over time to respond to new requirements,\n- made a foundation for successful digitalization.\n\nThe ultimate goal is to deliver better software faster. Feel free to join. Let''s learn together!\n'), STRINGDECODE('For some executives, it\u2019s about technology. For others, digital is a new way of engaging with customers.\n\nIt\u2019s tempting to look for simple definitions, but to be meaningful and sustainable, I believe that digital should be seen less as a thing and more a way of doing things. To help make this definition more concrete, I have broken it down into three attributes: \n- creating value at the new frontiers of the business world, \n- creating value in the processes that execute a vision of customer experiences, \n- and building foundational capabilities that support the entire structure.\n\n\n## The trio - architecture, culture & process\n\nThe main focus of this blog post is the third part of the definition - \"building foundational capabilities that support the entire structure\". This foundation is made up of three elements:\n\n- [Microservices](http://microservices.io/patterns/microservices.html) is the architecture,\n- [DevOps](http://martinfowler.com/bliki/DevOpsCulture.html)\u2014specifically CALMS (collaboration, automation, learning, measuring, and sharing)\u2014is the culture,\n- and [continuous delivery](http://martinfowler.com/bliki/ContinuousDelivery.html) is the process.\n\n### Architecture - Microservices\n\nThe microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API (RESTful). These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n\nWhen organizations make the choice to put a digital platform in place, a discussion on Microservices is never far behind. By putting a Microservices layer in place, an organization creates the springboard to launch into the digital future, whether that involves apps, rich Web clients, or IoT devices such as in-store beacons. Individual Microservices, or orchestrated groups of Microservices, serve as the foundation for this innovation. The data being passed to and from Microservices also serves as the basis for behavioral analytics and Big Data, allowing organizations to tailor their digital services based on their users.\n\nA Microservices architecture style brings a lot of operations overhead. Where a monolithic application might have been deployed to a small application server cluster, you now have tens of separate services to build, test, deploy and run, potentially in polyglot languages and environments.\n\n#### Cloud \n\nIf you look at the concerns typically expressed about microservices, you will find that they are exactly the challenges that a PaaS (Platform As A Service) is intended to address.\n\nPaaS offerings like [Cloud Foundry](https://www.cloudfoundry.org/) have raised the level of abstraction to a focus on an ecosystem of applications and services. Cloud Foundry is open source and it can be deployed on private or public (IaaS) infrastructure.\n\nLinux container technology, such as [Docker](https://www.docker.com/), can be used to streamline the development, testing and deployment experience. The Docker platform empowers you to build a [CaaS](https://blog.docker.com/2016/02/containers-as-a-service-caas/) (Containers as a service) that fits your business requirements.\n\n#### Cloud native\n\nA cloud-native application is an application that has been designed and implemented to run on a PaaS or CaaS installation, and to embrace horizontal elastic scaling.\n\n### Culture - collaboration, automation, learning, measuring, and sharing\n\nWestrum\u2019s research emphasizes the importance of creating a culture where new ideas are welcomed, people from across the organization collaborate in the pursuit of common goals, where we train people to bring bad news so we can act on it, and where failures and accidents are treated as opportunities to learn how to improve rather than witch-hunts.\n\nThe DevOps movement has always emphasized the primary importance of culture, with a particular focus on effective collaboration between development teams and IT operations teams.\n\nWith the uptake of microservices and containers new challenges are rising: \u201cHow can we manage aspects such as API contracts?\u201d and \u201cHow can we apply changes across several repositories at once?\u201d. Those challenges highlight the need for greater collaboration between, and within, teams and this is a challenge that [Atomist](https://www.atomist.com) is addressing. Atomist is setting out to tackle with a set of tools that integrate seamlessly with the teams\u2019 practices.\nWith the rise of microservices, project creation is more and more important to individuals and organizations, as is maintaining consistency between a potentially large number of services.\n\nIndeed the highest-performing companies don\u2019t wait for bad things to happen in order to learn how to improve, they create (controlled) accidents on a regular basis so as to learn more quickly than the competition.\n\n\n### Process - Continuous Delivery\n\nThe idea of automated deployment is important. Indeed, if you take automating the deployment process to its logical conclusion, you could push every build that passes the necessary automated tests into production. The practice of automatically deploying every successful build directly into production is generally known as Continuous Deployment.\n\nHowever, a pure Continuous Deployment approach is not always appropriate for everyone. For example, many users would not appreciate new versions falling into their laps several times a week, and prefer a more predictable (and transparent) release cycle. Commercial and marketing considerations might also play a role in when a new release should actually be deployed. The notion of Continuous Delivery is a slight variation on the idea of Continuous Deployment that takes into account these considerations.\n\n[Spinnaker](http://www.spinnaker.io/) is an open source, multi-cloud continuous delivery platform for releasing software changes with high velocity and confidence.\n\n[Jenkins 2](https://jenkins.io/2.0/) pipelines are pretty neat to. I don''t think Spinnaker will every fully replace Jenkins and the million things it does. Spinnaker goal is to just make the ''deploy to cloud'' step simpler and more extensible.\n\n[CircleCI''s](https://circleci.com) continuous integration and delivery platform helps software teams rapidly release code with confidence by automating the build, test, and deploy process. CircleCI offers a modern software development platform that lets teams ramp quickly, scale easily, and build confidently every day. CircleCI offers a total of four free linux containers ($2400 annual value) for open-source projects.\n\n[Travis CI](https://travis-ci.org/) - Test and Deploy with Confidence. Testing your open source project is 10000% free with Travis CI.\n\n### The lab\n\nI have constucted a [lab](http://ivans-innovation-lab.github.io/). It is hosted on [Github](https://github.com/ivans-innovation-lab).\n\nThe intention of this lab is to build information system of fictitious company.\n\nYou will learn how we:\n\n- made decisions to use one pattern against the other,\n- changed architecture, organization (culture) and process over time to respond to new requirements,\n- made a foundation for successful digitalization.\n\nThe ultimate goal is to deliver better software faster. Feel free to join. Let''s learn together!\n'), 'Accelerating the digitization', 0);
INSERT INTO PUBLIC.BLOG_POST(ID, AGGREGATE_VERSION, AUTHOR_ID, BROADCAST, CATEGORY, DRAFT, PUBLIC_SLUG, PUBLISH_AT, RAW_CONTENT, RENDER_CONTENT, TITLE, VERSION) VALUES
('6cff29d7-ca7e-402f-8e63-ffc3dddbb1ab', 0, 'admin.admin', TRUE, 'ENGINEERING', TRUE, 'Being-a-software-architect', TIMESTAMP '2017-10-24 00:00:00.0', STRINGDECODE('Being a software architect involves much more than just knowing technology. Aside from being an excellent developer, you also have to be a leader.\n\n## Expectations\nIt is expected of you to:\n\n- Analyze technology, industry and market trends and keep current with those latest trends.\n- Analyze current technology environment and recommend solutions for improvement.\n- Ensure compliance with the architecture\n- Have exposure to multiple and diverse technologies, platforms and environments\n- Possess exceptional interpersonal skills, including teamwork, facilitation and negotiation\n- Define architecture and design principles to guide technology decisions for the enterprise\n- Understand the political climate of the enterprise and be able to navigate the politics.\n\n## Aspects\nMain aspects of this role are:\n\n- leadership and communication\n- technical knowledge\n- business domain knowledge\n- methodology and strategy\n\n### Leadership and Communication\n\n#### Three C\u2019s:\n\n- communication (effectively communicate ideas, concepts, issues and solutions to stakeholders)\n- collaboration (get stakeholders involved in the architecture process and solicit ideas and feedback early and often)\n- clarity (articulate the architecture solution in clear and concise terms as appropriate to each stakeholder)\n\n#### Translation skills\n\n- \u201cBusiness is constantly changing to meet demands of the marketplace\u201d -&gt; Agility, Maintainability\n- \u201cDue the new regulatory requirements, it is imperative that we complete end-of- day processing in time\u201d -&gt; Performance, Scalability\n- \u201cWe need faster time to market to remain competitive\u201d -&gt; Agility, Maintainability\n- \u201cOur plan is to engage heavily in mergers and acquisitions in the next three years \u201c-&gt; Flexibility, Scalability, Integrations.\n- \u201cWe have a very tight timeframe and budget for this project\u201d -&gt; feasibility\n\n### Technical Knowledge\n\n#### Triangle of knowledge\n\n- at the top: stuff you know (technical depth)\n- second level: stuff you know you don\u2019t know (technical breadth)\n- third level: stuff you do not know you don\u2019t know\n\nFocus on the second level.\n\n#### Multi-platform knowledge\n\n- golden hammer antipattern - one platform to rule them all\n- overview multiple platforms to solve the problem\n\n### Business domain knowledge\n\nIt is important that an architect understand the business.\n\n- communicate better with the business\n- better understand business goals, issues and trends\n- gain trust by speaking the business language\n- design the system to better handle the future changes\n- better determine the correct architecture pattern\n\n### Methodology and strategy\n\nOnce you know where to go, how do you get there?\n\nBe aware of many different methodologies. You can influence on the business to choose right methodology\n\n#### Sample scenarios\n\n**Scanario 1.** Do not choose Waterfall Model\n\n- incomplete requirements\n- you expect a lot of change\n- tight budget and timeframe\n\n**Scenario 2.** Do not choose Scrum or agile\n\n- large and complex project\n- multiple remote teams\n- integrated maintenance\n\n**Scenario 3.** Hybrid\n\n- try to create a hybrid to strike the right balance\n\n**Regardless of what you do, as an architect you have to make it work!**'), STRINGDECODE('Being a software architect involves much more than just knowing technology. Aside from being an excellent developer, you also have to be a leader.\n\n## Expectations\nIt is expected of you to:\n\n- Analyze technology, industry and market trends and keep current with those latest trends.\n- Analyze current technology environment and recommend solutions for improvement.\n- Ensure compliance with the architecture\n- Have exposure to multiple and diverse technologies, platforms and environments\n- Possess exceptional interpersonal skills, including teamwork, facilitation and negotiation\n- Define architecture and design principles to guide technology decisions for the enterprise\n- Understand the political climate of the enterprise and be able to navigate the politics.\n\n## Aspects\nMain aspects of this role are:\n\n- leadership and communication\n- technical knowledge\n- business domain knowledge\n- methodology and strategy\n\n### Leadership and Communication\n\n#### Three C\u2019s:\n\n- communication (effectively communicate ideas, concepts, issues and solutions to stakeholders)\n- collaboration (get stakeholders involved in the architecture process and solicit ideas and feedback early and often)\n- clarity (articulate the architecture solution in clear and concise terms as appropriate to each stakeholder)\n\n#### Translation skills\n\n- \u201cBusiness is constantly changing to meet demands of the marketplace\u201d -&gt; Agility, Maintainability\n- \u201cDue the new regulatory requirements, it is imperative that we complete end-of- day processing in time\u201d -&gt; Performance, Scalability\n- \u201cWe need faster time to market to remain competitive\u201d -&gt; Agility, Maintainability\n- \u201cOur plan is to engage heavily in mergers and acquisitions in the next three years \u201c-&gt; Flexibility, Scalability, Integrations.\n- \u201cWe have a very tight timeframe and budget for this project\u201d -&gt; feasibility\n\n### Technical Knowledge\n\n#### Triangle of knowledge\n\n- at the top: stuff you know (technical depth)\n- second level: stuff you know you don\u2019t know (technical breadth)\n- third level: stuff you do not know you don\u2019t know\n\nFocus on the second level.\n\n#### Multi-platform knowledge\n\n- golden hammer antipattern - one platform to rule them all\n- overview multiple platforms to solve the problem\n\n### Business domain knowledge\n\nIt is important that an architect understand the business.\n\n- communicate better with the business\n- better understand business goals, issues and trends\n- gain trust by speaking the business language\n- design the system to better handle the future changes\n- better determine the correct architecture pattern\n\n### Methodology and strategy\n\nOnce you know where to go, how do you get there?\n\nBe aware of many different methodologies. You can influence on the business to choose right methodology\n\n#### Sample scenarios\n\n**Scanario 1.** Do not choose Waterfall Model\n\n- incomplete requirements\n- you expect a lot of change\n- tight budget and timeframe\n\n**Scenario 2.** Do not choose Scrum or agile\n\n- large and complex project\n- multiple remote teams\n- integrated maintenance\n\n**Scenario 3.** Hybrid\n\n- try to create a hybrid to strike the right balance\n\n**Regardless of what you do, as an architect you have to make it work!**'), 'Being a software architect', 0);
INSERT INTO PUBLIC.BLOG_POST(ID, AGGREGATE_VERSION, AUTHOR_ID, BROADCAST, CATEGORY, DRAFT, PUBLIC_SLUG, PUBLISH_AT, RAW_CONTENT, RENDER_CONTENT, TITLE, VERSION) VALUES
('5f676bcc-5564-4586-bdd9-a06b7c892496', 0, 'admin.admin', TRUE, 'ENGINEERING', TRUE, 'Continuous-delivery-in-the-cloud', TIMESTAMP '2017-10-26 00:00:00.0', STRINGDECODE('The idea of automated deployment is important. Indeed, if you take automating the deployment process to its logical conclusion, you could push every build that passes the necessary automated tests into production. The practice of automatically deploying every successful build directly into production is generally known as Continuous Deployment.\n\nHowever, a pure Continuous Deployment approach is not always appropriate for everyone. For example, many users would not appreciate new versions falling into their laps several times a week, and prefer a more predictable \\(and transparent\\) release cycle. Commercial and marketing considerations might also play a role in when a new release should actually be deployed. The notion of Continuous Delivery is a variation on the idea of Continuous Deployment that takes into account these considerations.\n\nThe key pattern introduced in continuous delivery is the _deployment pipeline._\n\nIn the deployment pipeline pattern, every change in version control triggers a process \\(usually in a [CI](https://continuousdelivery.com/foundations/continuous-integration/) server\\) which creates deployable packages and runs automated unit tests and other validations such as static code analysis. This first step is optimized so that it takes only a few minutes to run. If this initial commit stage fails, the problem must be fixed immediately\u2014nobody should check in more work on a broken commit stage. Every passing commit stage triggers the next step in the pipeline, which might consist of a more comprehensive set of automated tests. Versions of the software that pass all the automated tests can then be deployed on demand to further stages such as exploratory testing, performance testing, staging, and production, as shown below.\n\n## Deployment pipeline\n\n**This is a real-life, open-source, java, maven, spring-boot [application](https://github.com/ivans-innovation-lab/my-company-monolith)** with monolithic architectural style. Domain Driven Design is applied through Event Sourcing and CQRS. How Event Sourcing enables deployment flexibility - the monolithic application can be migrated and deployed as a microservices. You can find more information about the structure of application/s [here](http://ivans-innovation-lab.github.io/projects).\n\nThe infrastructure and tools needed for the pipeline are:\n\n* [Artifactory](https://www.jfrog.com/artifactory/) as Maven repository on AWS\n  * [http://maven.idugalic.pro](http://maven.idugalic.pro)\n* [CircleCI](https://circleci.com/) as continuous integration and delivery platform\n* [PWS](http://run.pivotal.io/) - an instance of the Cloud Foundry platform-as-a-service operated by Pivotal Software, Inc.\n\n\nThis \"Pipeline as Code\" is written to a [.circleci/config.yml](https://github.com/ivans-innovation-lab/my-company-monolith/blob/master/.circleci/config.yml) and checked into a project\u2019s source control repository.\n\n\nThe following example shows a [pipeline](https://circleci.com/gh/ivans-innovation-lab/workflows/my-company-monolith) with seven sequential jobs. The jobs run according to configured requirements, each job waiting to start until the required job finishes successfully. This pipeline is configured to wait for manual approval of a job ''approve-production'' before continuing by using the `type: approval` key. The `type: approval` key is a special job that is only added under your `workflow` key\n\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/Screen%20Shot%202017-09-09%20at%201.13.34%20PM.png)\n\n### Staging\n\nEvery push to **master** branch \\(every time you merge a feature branch\\) will trigger the pipeline and the application will be deployed to PWS on ''**Stage**'' space:![](https://docs.lab.idugalic.pro/assets/Screen%20Shot%202017-06-21%20at%201.28.42%20PM.png)Additionally, a current production artifact will be deployed on Stage by ''staging-prod'' job for DB schema backward compatibility testing \\(we will test old application against new DB schema\\). This will enable Blue-Green deployment with roll-back option, as shown below under Blue-Green Deployment section.\n\n### Production\n\nOnce you are ready to deploy to **production** you should manually approve deployment to production in you CircleCI workflow/pipeline. This will trigger next job \\(production\\) and the application will be deployed (with zero-downtime) to PWS on ''**Prod**'' space:![](https://docs.lab.idugalic.pro/assets/Screen%20Shot%202017-06-21%20at%201.28.58%20PM.png)You can consider removing manual step (approve) and practice Continuous Deployment instead of Continuous Delivery ;)\n\n### Requirements\n\nFor the pipeline to work you have to create two spaces \\(environments\\) on PWS:\n\n* Stage\n* Prod\n\nOn each space you have to create instance of ClearDB MySQL service \\(database\\):\n\n```\ncf api https://api.run.pivotal.io\ncf auth EMAIL PASSWORD\ncf target -o idugalic -s Stage\ncf create-service cleardb spark mysql\ncf t -s Prod\ncf create-service cleardb spark mysql\n```\n\nNOTE: Instructions to install CloudFoundry CLI \\(cf\\): [https://docs.cloudfoundry.org/cf-cli/install-go-cli.html](https://docs.cloudfoundry.org/cf-cli/install-go-cli.html)\n\n### Metrics\n\nPCF Metrics helps you understand and troubleshoot the health and performance of your apps by displaying the following:\n\n* [Container Metrics](http://docs.run.pivotal.io/metrics/using.html#container)\n   A graph of CPU, memory, and disk usage percentages\n* [Network Metrics](http://docs.run.pivotal.io/metrics/using.html#network)\n   A graph of requests, HTTP errors, and response times\n* [App Events](http://docs.run.pivotal.io/metrics/using.html#events)\n   A graph of update, start, stop, crash, SSH, and staging failure events\n* [Logs](http://docs.run.pivotal.io/metrics/using.html#logs)\n   A list of app logs that you can search, filter, and download\n* [Trace Explorer](http://docs.run.pivotal.io/metrics/using.html#trace)\n   A graph that traces a request as it flows through your apps and their endpoints, along with the corresponding logs\n\n![](https://docs.lab.idugalic.pro/assets/Screen%20Shot%202017-06-16%20at%2011.45.31%20AM.png)\n\n### Autoscaler\n\n[App Autoscaler](https://docs.run.pivotal.io/appsman-services/autoscaler/using-autoscaler.html) is a marketplace service that ensures app performance and helps control the cost of running apps.\n\nTo balance app performance and cost, Space Developers and Space Managers can use App Autoscaler to do the following:\n\n* Configure rules that adjust instance counts based on metrics thresholds such as CPU Usage\n* Modify the maximum and minimum number of instances for an app, either manually or following a schedule\n\n### Spring Boot Actuator\n\nAdding Actuator to your Spring Boot application deployed on Pivotal Cloud Foundry gets you the following production-ready features:\n\n* Health Check column & expanded information in Instances section\n* git commit id indicator, navigable to your git repo\n* Summary git info under Settings tab \\(also navigable to repo\\)\n* Runtime adjustment of logging levels, exposed via Actuator endpoints\n* Heap Dump\\*\n* View Trace\\*\n* View Threads, dump/download for further analysis\\*\n\n### Blue-Green Deployment\n\n[Blue-green deployment](https://docs.run.pivotal.io/devguide/deploy-apps/blue-green.html) is a release technique that reduces downtime and risk by running two identical production environments called Blue and Green.\n\nAt any time, only one of the environments is live, with the live environment serving all production traffic. For this example, Blue is currently live and Green is idle.\n\nAs you prepare a new release of your software, deployment and the final stage of testing takes place in the environment that is not live: in this example, Green. Once you have deployed and fully tested the software in Green, you switch the router so all incoming requests now go to Green instead of Blue. Green is now live, and Blue is idle.\n\nThis technique can eliminate downtime due to application deployment. In addition, blue-green deployment reduces risk: if something unexpected happens with your new release on Green, you can immediately roll back to the last version by switching back to Blue.\n\nBlue-green deployment is implemented by ''production'' job in the [workflow](https://github.com/ivans-innovation-lab/my-company-monolith/blob/master/.circleci/config.yml).\n\nDoing Blue-green deployment with database schema changing is not easy. We have to [change the schema](https://martinfowler.com/books/refactoringDatabases.html) in such a way that Blue-green deployment and roll-back to the previous version are possible, usually by making DB changes backward compatible (this makes DB schema backward compatibility testing an important step). For this we need schema versioning first \\([Flyway](http://flywaydb.org/)\\). I was inspired with this [blog post](https://spring.io/blog/2016/05/31/zero-downtime-deployment-with-a-database). There you can find more details.\n\nYou can design your database in the 6th normal form an make you scheme more adaptable and your process more agile. I was inspired with this [blog post](https://blog.codecentric.de/en/2017/07/agile-database-design-using-anchor-modeling/ ).\n'), STRINGDECODE('The idea of automated deployment is important. Indeed, if you take automating the deployment process to its logical conclusion, you could push every build that passes the necessary automated tests into production. The practice of automatically deploying every successful build directly into production is generally known as Continuous Deployment.\n\nHowever, a pure Continuous Deployment approach is not always appropriate for everyone. For example, many users would not appreciate new versions falling into their laps several times a week, and prefer a more predictable \\(and transparent\\) release cycle. Commercial and marketing considerations might also play a role in when a new release should actually be deployed. The notion of Continuous Delivery is a variation on the idea of Continuous Deployment that takes into account these considerations.\n\nThe key pattern introduced in continuous delivery is the _deployment pipeline._\n\nIn the deployment pipeline pattern, every change in version control triggers a process \\(usually in a [CI](https://continuousdelivery.com/foundations/continuous-integration/) server\\) which creates deployable packages and runs automated unit tests and other validations such as static code analysis. This first step is optimized so that it takes only a few minutes to run. If this initial commit stage fails, the problem must be fixed immediately\u2014nobody should check in more work on a broken commit stage. Every passing commit stage triggers the next step in the pipeline, which might consist of a more comprehensive set of automated tests. Versions of the software that pass all the automated tests can then be deployed on demand to further stages such as exploratory testing, performance testing, staging, and production, as shown below.\n\n## Deployment pipeline\n\n**This is a real-life, open-source, java, maven, spring-boot [application](https://github.com/ivans-innovation-lab/my-company-monolith)** with monolithic architectural style. Domain Driven Design is applied through Event Sourcing and CQRS. How Event Sourcing enables deployment flexibility - the monolithic application can be migrated and deployed as a microservices. You can find more information about the structure of application/s [here](http://ivans-innovation-lab.github.io/projects).\n\nThe infrastructure and tools needed for the pipeline are:\n\n* [Artifactory](https://www.jfrog.com/artifactory/) as Maven repository on AWS\n  * [http://maven.idugalic.pro](http://maven.idugalic.pro)\n* [CircleCI](https://circleci.com/) as continuous integration and delivery platform\n* [PWS](http://run.pivotal.io/) - an instance of the Cloud Foundry platform-as-a-service operated by Pivotal Software, Inc.\n\n\nThis \"Pipeline as Code\" is written to a [.circleci/config.yml](https://github.com/ivans-innovation-lab/my-company-monolith/blob/master/.circleci/config.yml) and checked into a project\u2019s source control repository.\n\n\nThe following example shows a [pipeline](https://circleci.com/gh/ivans-innovation-lab/workflows/my-company-monolith) with seven sequential jobs. The jobs run according to configured requirements, each job waiting to start until the required job finishes successfully. This pipeline is configured to wait for manual approval of a job ''approve-production'' before continuing by using the `type: approval` key. The `type: approval` key is a special job that is only added under your `workflow` key\n\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/Screen%20Shot%202017-09-09%20at%201.13.34%20PM.png)\n\n### Staging\n\nEvery push to **master** branch \\(every time you merge a feature branch\\) will trigger the pipeline and the application will be deployed to PWS on ''**Stage**'' space:![](https://docs.lab.idugalic.pro/assets/Screen%20Shot%202017-06-21%20at%201.28.42%20PM.png)Additionally, a current production artifact will be deployed on Stage by ''staging-prod'' job for DB schema backward compatibility testing \\(we will test old application against new DB schema\\). This will enable Blue-Green deployment with roll-back option, as shown below under Blue-Green Deployment section.\n\n### Production\n\nOnce you are ready to deploy to **production** you should manually approve deployment to production in you CircleCI workflow/pipeline. This will trigger next job \\(production\\) and the application will be deployed (with zero-downtime) to PWS on ''**Prod**'' space:![](https://docs.lab.idugalic.pro/assets/Screen%20Shot%202017-06-21%20at%201.28.58%20PM.png)You can consider removing manual step (approve) and practice Continuous Deployment instead of Continuous Delivery ;)\n\n### Requirements\n\nFor the pipeline to work you have to create two spaces \\(environments\\) on PWS:\n\n* Stage\n* Prod\n\nOn each space you have to create instance of ClearDB MySQL service \\(database\\):\n\n```\ncf api https://api.run.pivotal.io\ncf auth EMAIL PASSWORD\ncf target -o idugalic -s Stage\ncf create-service cleardb spark mysql\ncf t -s Prod\ncf create-service cleardb spark mysql\n```\n\nNOTE: Instructions to install CloudFoundry CLI \\(cf\\): [https://docs.cloudfoundry.org/cf-cli/install-go-cli.html](https://docs.cloudfoundry.org/cf-cli/install-go-cli.html)\n\n### Metrics\n\nPCF Metrics helps you understand and troubleshoot the health and performance of your apps by displaying the following:\n\n* [Container Metrics](http://docs.run.pivotal.io/metrics/using.html#container)\n   A graph of CPU, memory, and disk usage percentages\n* [Network Metrics](http://docs.run.pivotal.io/metrics/using.html#network)\n   A graph of requests, HTTP errors, and response times\n* [App Events](http://docs.run.pivotal.io/metrics/using.html#events)\n   A graph of update, start, stop, crash, SSH, and staging failure events\n* [Logs](http://docs.run.pivotal.io/metrics/using.html#logs)\n   A list of app logs that you can search, filter, and download\n* [Trace Explorer](http://docs.run.pivotal.io/metrics/using.html#trace)\n   A graph that traces a request as it flows through your apps and their endpoints, along with the corresponding logs\n\n![](https://docs.lab.idugalic.pro/assets/Screen%20Shot%202017-06-16%20at%2011.45.31%20AM.png)\n\n### Autoscaler\n\n[App Autoscaler](https://docs.run.pivotal.io/appsman-services/autoscaler/using-autoscaler.html) is a marketplace service that ensures app performance and helps control the cost of running apps.\n\nTo balance app performance and cost, Space Developers and Space Managers can use App Autoscaler to do the following:\n\n* Configure rules that adjust instance counts based on metrics thresholds such as CPU Usage\n* Modify the maximum and minimum number of instances for an app, either manually or following a schedule\n\n### Spring Boot Actuator\n\nAdding Actuator to your Spring Boot application deployed on Pivotal Cloud Foundry gets you the following production-ready features:\n\n* Health Check column & expanded information in Instances section\n* git commit id indicator, navigable to your git repo\n* Summary git info under Settings tab \\(also navigable to repo\\)\n* Runtime adjustment of logging levels, exposed via Actuator endpoints\n* Heap Dump\\*\n* View Trace\\*\n* View Threads, dump/download for further analysis\\*\n\n### Blue-Green Deployment\n\n[Blue-green deployment](https://docs.run.pivotal.io/devguide/deploy-apps/blue-green.html) is a release technique that reduces downtime and risk by running two identical production environments called Blue and Green.\n\nAt any time, only one of the environments is live, with the live environment serving all production traffic. For this example, Blue is currently live and Green is idle.\n\nAs you prepare a new release of your software, deployment and the final stage of testing takes place in the environment that is not live: in this example, Green. Once you have deployed and fully tested the software in Green, you switch the router so all incoming requests now go to Green instead of Blue. Green is now live, and Blue is idle.\n\nThis technique can eliminate downtime due to application deployment. In addition, blue-green deployment reduces risk: if something unexpected happens with your new release on Green, you can immediately roll back to the last version by switching back to Blue.\n\nBlue-green deployment is implemented by ''production'' job in the [workflow](https://github.com/ivans-innovation-lab/my-company-monolith/blob/master/.circleci/config.yml).\n\nDoing Blue-green deployment with database schema changing is not easy. We have to [change the schema](https://martinfowler.com/books/refactoringDatabases.html) in such a way that Blue-green deployment and roll-back to the previous version are possible, usually by making DB changes backward compatible (this makes DB schema backward compatibility testing an important step). For this we need schema versioning first \\([Flyway](http://flywaydb.org/)\\). I was inspired with this [blog post](https://spring.io/blog/2016/05/31/zero-downtime-deployment-with-a-database). There you can find more details.\n\nYou can design your database in the 6th normal form an make you scheme more adaptable and your process more agile. I was inspired with this [blog post](https://blog.codecentric.de/en/2017/07/agile-database-design-using-anchor-modeling/ ).\n'), 'Continuous delivery in the cloud', 0);
INSERT INTO PUBLIC.BLOG_POST(ID, AGGREGATE_VERSION, AUTHOR_ID, BROADCAST, CATEGORY, DRAFT, PUBLIC_SLUG, PUBLISH_AT, RAW_CONTENT, RENDER_CONTENT, TITLE, VERSION) VALUES
('23aa6d78-5e32-44df-b23e-02cad8373711', 0, 'admin.admin', TRUE, 'ENGINEERING', TRUE, 'Bots-Are-Here', TIMESTAMP '2017-10-27 00:00:00.0', STRINGDECODE('\u201cSay hello to my little friend\u201d [Atomist](https://www.atomist.com/)! It is a SaaS. It is a ChatOps. **One of it\u2019s main interfaces is \u2018Atomist Slack [ro]bot\u2019**. My team member.\n\n## Context\n\nWith the rise of distributed systems, project creation is more and more important to individuals and organizations, as is maintaining consistency between a potentially large number of services or components.\n\nNew challenges are rising:\n\n - \u201cHow can we manage aspects such as API contracts?\u201d \n - \u201cHow can we apply changes across several repositories at once?\u201d\n - \u201cHow can we aggregate and connect all the data coming from PaaS, IaaS, CI tools, chat tools \u2026?\u201d\n\nThose challenges highlight the need for greater collaboration between, and within, teams and this is a challenge that Atomist is addressing.\n\nIn one of my previous [posts](http://idugalic.pro/Accelerating-the-digitization/) I wrote that there is important relation between architecture, process (continuous delivery) and the culture (devops, chatops). \nFor the purposes of this post we will use an [open source lab](http://lab.idugalic.pro) that I regularly maintain, and focus on [monolithic](https://docs.lab.idugalic.pro/chapter1/monolithic/overview.html) (modular) architectural pattern. You will see how Atomist is helping me steering the process.\n\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_1.png)\n\n## Atomist is code\n\n[Atomist](https://www.atomist.com/) consumes your code (Java, C#, JavaScript, Scala, Python, Clojure, even Dockerfiles and Maven POMs), understanding your files, classes, variables, exceptions and more. This understanding is used to modify code directly and to connect code changes to runtime changes. You can find Atomist documentation here: [http://docs.atomist.com/](http://docs.atomist.com/)\n\n### A generator\n\n[Generators](http://docs.atomist.com/user-guide/rug/generators/) create new projects from an existing source project (a template).\nFor the purposes of this lab we have created two generators, one for the command side component, and one for the query side component:\n\n - [https://github.com/ivans-innovation-lab/my-company-rugs-domain-generator](https://github.com/ivans-innovation-lab/my-company-rugs-domain-generator)\n - [https://github.com/ivans-innovation-lab/my-company-rugs-materialized-view-generator](https://github.com/ivans-innovation-lab/my-company-rugs-materialized-view-generator)\n\nIt would be a good idea to make the source projects (templates) a working projects in its own right, but for the simplicity and educational reasons we will not do that now.\n\nI suppose you have already installed:\n\n- [Rug CLI](http://docs.atomist.com/user-guide/interfaces/cli/install/)\n- [Node.js](https://nodejs.org/)\n\nand you already know how to create a generator. Please do so, it\u2019s a lot of fun! For now, you can clone this:\n\n```\n$ git clone https://github.com/ivans-innovation-lab/my-company-rugs-materialized-view-generator.git\n$ ( cd .atomist && npm install )\n$ rug install\n```\nYou have just installed a generator archive with version \"0.1.1\", into your local repository, and it is ready to be used. The version is set in the [package.json](https://github.com/ivans-innovation-lab/my-company-rugs-materialized-view-generator/blob/master/.atomist/package.json) file. \nYou can setup a \u2018maven\u2019 repository within your company firewall and use it to share your archives within the organization if you wish.\n\nNow, we will create a new project by using generator that we have installed:\n\n```\n$ rug generate my-company-rugs:query-side-project-generator:NewQuerySideProject \\\n    my-company-customer-materialized-view \\\n    aggregateName=Customer \\\n    version=0.1.0-SNAPSHOT \\\n    description=\"Query Side - Customer\"\n```\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_2.png)\n\nIf you are happy with the change, commit the changes:\n```\n$ cd my-company-customer-materialized-view\n$ git init\n$ git add .\n$ git commit -m ''Initial version generated by Atomist generator''\n```\n\n## Atomist is SaaS\n\nAtomis is more then the code, it understands the relationship between your code, your tools, your environments, and your running services and brings this information to where you live: chat. \n\nCLI is not the only interface you can use. There is a Slack bot available for you.\n[Invite Atomist bot](https://atm.st/2wiDlUe) into your Slack team. You can find more information on how to do that here: http://docs.atomist.com/getting-started/slack\n\nYou have a new team member now, and you can \u2018command\u2019 him to do stuff for you ;). \nLet\u2019s tell ''him'' to create a new project for us, same as we did with the CLI, but now we will do it within the slack channel. \n\nFirst, we will publish our generator archive to Atomist SaaS, so the bot is aware of it:\n\n```\n$ cd my-company-rugs-materialized-view-generator \n$ rug publish --id=YOUR_TOKEN\n````\nYou should ask atomist bot in the channel about your team token (YOUR_TOKEN):\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_3.png)\n\nNext, we can list all our published generators filtered by [tag ''idugalic''](https://github.com/ivans-innovation-lab/my-company-rugs-domain-generator/blob/master/.atomist/generators/NewCommandSideProject.ts):\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_4.png)\n\nWe choose to create a ''Query Side'' project by hitting the ''Generate project'' button.\nIn the thread on the side Atomist is asking you to enter project name (e.g my-company-customer-materialized-view), and aggregate name (e.g Customer). \n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_5.png)\n\nOnce you answer all the questions, atomist will create a new project on the Github, and link a Slack channel to it, so you can track that [git repository](https://github.com/ivans-innovation-lab/my-company-customer-materialized-view).\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_6.png)\n\nAny commit will trigger the [CircleCI](https://github.com/ivans-innovation-lab/my-company-customer-materialized-view/blob/master/.circleci/config.yml) workflow, and Atomist bot will display the results back to the channel.\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_7.png)\n\nThere are some cool editors provided by Atomist out of the box. We will use \u2018AddAtomistAgent\u2019. This editor will change the project you have generated by adding new library in the pom, and let atomist display deployment status on all environments, including development.\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_8.png)\n\nThe editor ran successfully in ivans-innovation-lab/my-company-customer-materialized-view, and now we have open pull request that we can merge directly from the Slack channel:\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_9.png)\n\nAdditionally you get a feature called \u2018fingerprints\u2019. This feature detects important changes to code and configuration. They ensure that critical, potentially breaking changes don\u2019t slip by unnoticed and cause outages or other problems. In this case it shows that the build configuration, properties and the configured plugins changed. Fingerprints enable teams to see if a change is a big deal or not with minimal effort, helping to reduce the likelihood of inadvertent breakage.\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_10.png)\nThis was a pull request and the fingerprint changes also appear as a [GitHub status check](https://github.com/blog/1935-see-results-from-all-pull-request-status-checks).\n\n## Kudos\n\nThis is just a small part that I was able to show you. I hope that you will find out how Atomist can help your project or product.\n\nAtomist is a true team member. It (he/she :)) helped us integrate tools like CircleCI, Github and Slack. Atomist correlate events this tools propagate into meaningful data that we can understand, and react upon.\n\nI personally believe that tools like this will change the way we work and keep us in the development process loop. The process that we have designed in the beginning.'), STRINGDECODE('\u201cSay hello to my little friend\u201d [Atomist](https://www.atomist.com/)! It is a SaaS. It is a ChatOps. **One of it\u2019s main interfaces is \u2018Atomist Slack [ro]bot\u2019**. My team member.\n\n## Context\n\nWith the rise of distributed systems, project creation is more and more important to individuals and organizations, as is maintaining consistency between a potentially large number of services or components.\n\nNew challenges are rising:\n\n - \u201cHow can we manage aspects such as API contracts?\u201d \n - \u201cHow can we apply changes across several repositories at once?\u201d\n - \u201cHow can we aggregate and connect all the data coming from PaaS, IaaS, CI tools, chat tools \u2026?\u201d\n\nThose challenges highlight the need for greater collaboration between, and within, teams and this is a challenge that Atomist is addressing.\n\nIn one of my previous [posts](http://idugalic.pro/Accelerating-the-digitization/) I wrote that there is important relation between architecture, process (continuous delivery) and the culture (devops, chatops). \nFor the purposes of this post we will use an [open source lab](http://lab.idugalic.pro) that I regularly maintain, and focus on [monolithic](https://docs.lab.idugalic.pro/chapter1/monolithic/overview.html) (modular) architectural pattern. You will see how Atomist is helping me steering the process.\n\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_1.png)\n\n## Atomist is code\n\n[Atomist](https://www.atomist.com/) consumes your code (Java, C#, JavaScript, Scala, Python, Clojure, even Dockerfiles and Maven POMs), understanding your files, classes, variables, exceptions and more. This understanding is used to modify code directly and to connect code changes to runtime changes. You can find Atomist documentation here: [http://docs.atomist.com/](http://docs.atomist.com/)\n\n### A generator\n\n[Generators](http://docs.atomist.com/user-guide/rug/generators/) create new projects from an existing source project (a template).\nFor the purposes of this lab we have created two generators, one for the command side component, and one for the query side component:\n\n - [https://github.com/ivans-innovation-lab/my-company-rugs-domain-generator](https://github.com/ivans-innovation-lab/my-company-rugs-domain-generator)\n - [https://github.com/ivans-innovation-lab/my-company-rugs-materialized-view-generator](https://github.com/ivans-innovation-lab/my-company-rugs-materialized-view-generator)\n\nIt would be a good idea to make the source projects (templates) a working projects in its own right, but for the simplicity and educational reasons we will not do that now.\n\nI suppose you have already installed:\n\n- [Rug CLI](http://docs.atomist.com/user-guide/interfaces/cli/install/)\n- [Node.js](https://nodejs.org/)\n\nand you already know how to create a generator. Please do so, it\u2019s a lot of fun! For now, you can clone this:\n\n```\n$ git clone https://github.com/ivans-innovation-lab/my-company-rugs-materialized-view-generator.git\n$ ( cd .atomist && npm install )\n$ rug install\n```\nYou have just installed a generator archive with version \"0.1.1\", into your local repository, and it is ready to be used. The version is set in the [package.json](https://github.com/ivans-innovation-lab/my-company-rugs-materialized-view-generator/blob/master/.atomist/package.json) file. \nYou can setup a \u2018maven\u2019 repository within your company firewall and use it to share your archives within the organization if you wish.\n\nNow, we will create a new project by using generator that we have installed:\n\n```\n$ rug generate my-company-rugs:query-side-project-generator:NewQuerySideProject \\\n    my-company-customer-materialized-view \\\n    aggregateName=Customer \\\n    version=0.1.0-SNAPSHOT \\\n    description=\"Query Side - Customer\"\n```\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_2.png)\n\nIf you are happy with the change, commit the changes:\n```\n$ cd my-company-customer-materialized-view\n$ git init\n$ git add .\n$ git commit -m ''Initial version generated by Atomist generator''\n```\n\n## Atomist is SaaS\n\nAtomis is more then the code, it understands the relationship between your code, your tools, your environments, and your running services and brings this information to where you live: chat. \n\nCLI is not the only interface you can use. There is a Slack bot available for you.\n[Invite Atomist bot](https://atm.st/2wiDlUe) into your Slack team. You can find more information on how to do that here: http://docs.atomist.com/getting-started/slack\n\nYou have a new team member now, and you can \u2018command\u2019 him to do stuff for you ;). \nLet\u2019s tell ''him'' to create a new project for us, same as we did with the CLI, but now we will do it within the slack channel. \n\nFirst, we will publish our generator archive to Atomist SaaS, so the bot is aware of it:\n\n```\n$ cd my-company-rugs-materialized-view-generator \n$ rug publish --id=YOUR_TOKEN\n````\nYou should ask atomist bot in the channel about your team token (YOUR_TOKEN):\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_3.png)\n\nNext, we can list all our published generators filtered by [tag ''idugalic''](https://github.com/ivans-innovation-lab/my-company-rugs-domain-generator/blob/master/.atomist/generators/NewCommandSideProject.ts):\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_4.png)\n\nWe choose to create a ''Query Side'' project by hitting the ''Generate project'' button.\nIn the thread on the side Atomist is asking you to enter project name (e.g my-company-customer-materialized-view), and aggregate name (e.g Customer). \n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_5.png)\n\nOnce you answer all the questions, atomist will create a new project on the Github, and link a Slack channel to it, so you can track that [git repository](https://github.com/ivans-innovation-lab/my-company-customer-materialized-view).\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_6.png)\n\nAny commit will trigger the [CircleCI](https://github.com/ivans-innovation-lab/my-company-customer-materialized-view/blob/master/.circleci/config.yml) workflow, and Atomist bot will display the results back to the channel.\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_7.png)\n\nThere are some cool editors provided by Atomist out of the box. We will use \u2018AddAtomistAgent\u2019. This editor will change the project you have generated by adding new library in the pom, and let atomist display deployment status on all environments, including development.\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_8.png)\n\nThe editor ran successfully in ivans-innovation-lab/my-company-customer-materialized-view, and now we have open pull request that we can merge directly from the Slack channel:\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_9.png)\n\nAdditionally you get a feature called \u2018fingerprints\u2019. This feature detects important changes to code and configuration. They ensure that critical, potentially breaking changes don\u2019t slip by unnoticed and cause outages or other problems. In this case it shows that the build configuration, properties and the configured plugins changed. Fingerprints enable teams to see if a change is a big deal or not with minimal effort, helping to reduce the likelihood of inadvertent breakage.\n![](https://github.com/idugalic/idugalic.github.io/raw/master/images/atomist_10.png)\nThis was a pull request and the fingerprint changes also appear as a [GitHub status check](https://github.com/blog/1935-see-results-from-all-pull-request-status-checks).\n\n## Kudos\n\nThis is just a small part that I was able to show you. I hope that you will find out how Atomist can help your project or product.\n\nAtomist is a true team member. It (he/she :)) helped us integrate tools like CircleCI, Github and Slack. Atomist correlate events this tools propagate into meaningful data that we can understand, and react upon.\n\nI personally believe that tools like this will change the way we work and keep us in the development process loop. The process that we have designed in the beginning.'), 'Bots Are Here', 0);



INSERT INTO PUBLIC.PROJECT(ID, AGGREGATE_VERSION, CATEGORY, DESCRIPTION, NAME, REPO_URL, SITE_URL, VERSION) VALUES
('44e71acd-9fcd-4474-a098-dd6adc1e8526', 0, 'Backend', 'Spring Boot. CQRS. Eventsourcing. Axonframework. Event-driven. Docker. REST API.', 'my-company-monolith', 'https://github.com/ivans-innovation-lab/my-company-monolith', 'http://lab.idugalic.pro/my-company-monolith/', 0),
('a3b041bd-6aff-4dd1-b70b-79a221da7f8c', 0, 'Frontend', 'Angular 4. Atomic design methodology. Feature and presentational components. Consumes my-company-monolith', 'my-company-angular-fe', 'https://github.com/ivans-innovation-lab/my-company-angular-fe', 'http://lab.idugalic.pro/my-company-angular-fe/', 0),
('39366307-cda8-4d85-a5f8-3c5770406df4', 0, 'Backend - Library', 'BlogPost aggregate. Command side. Spring Boot. CQRS. Eventsourcing. Axonframework.', 'my-company-blog-domain', 'https://github.com/ivans-innovation-lab/my-company-blog-domain', 'http://lab.idugalic.pro/my-company-blog-domain/', 0),
('2f7b89bb-3011-487f-86ee-fd96b69a63fb', 0, 'Backend - Library', 'BlogPost. Query side - Materialized view. Spring Boot. CQRS. Eventsourcing. Axonframework.', 'my-company-blog-materialized-view', 'https://github.com/ivans-innovation-lab/my-company-blog-materialized-view', 'http://lab.idugalic.pro/my-company-blog-materialized-view/', 0),
('d387118a-af6c-41e2-ae12-8ad473987deb', 0, 'Backend - Library', 'Project aggregate. Command side. Spring Boot. CQRS. Eventsourcing. Axonframework.', 'my-company-project-domain', 'https://github.com/ivans-innovation-lab/my-company-project-domain', 'http://lab.idugalic.pro/my-company-project-domain/', 0),
('70cd4e2b-7bf6-495e-adcb-25be88a02c8c', 0, 'Backend - Library', 'Project. Query side - Materialized view. Spring Boot. CQRS. Eventsourcing. Axonframework.', 'my-company-project-materialized-view', 'https://github.com/ivans-innovation-lab/my-company-project-materialized-view', 'http://lab.idugalic.pro/my-company-project-materialized-view/', 0),
('15ae57a0-1800-4eeb-9bce-2eb6a513937b', 0, 'Backend - Library', 'Common and shared libraries. Domain events.', 'my-company-common', 'https://github.com/ivans-innovation-lab/my-company-common', 'http://lab.idugalic.pro/my-company-common/', 0);
